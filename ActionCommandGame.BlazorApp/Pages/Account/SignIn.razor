@page "/signin"

@using ActionCommandGame.Api.Authentication.Model
@using ActionCommandGame.Sdk.Abstractions
@using ActionCommandGame.BlazorApp.Providers
@inject IIdentityApi IdentityApi
@inject ITokenStore TokenStore
@inject NavigationManager NavigationManager
@inject TokenAuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="SignInRequest" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
	<div class="container py-5 h-100">
			<div class="row d-flex justify-content-center align-items-center h-100">
				<div class="col-12 col-md-8 col-lg-6 col-xl-5">
					<div class="card bg-dark text-white" style="border-radius: 1rem;">
						<div class="card-body p-5 text-center">

							<div class="mb-md-5 mt-md-4 pb-5">

								<h2 class="fw-bold mb-2 text-uppercase">Login</h2>
								<p class="text-white-50 mb-5">Please enter your login and password!</p>

								<div class="form-outline form-white mb-4">
									<input type="email" id="typeEmailX" class="form-control form-control-lg" @bind="@SignInRequest.Email"/>
									<label class="form-label" for="typeEmailX">Email</label>
								</div>

								<div class="form-outline form-white mb-4">
									<input type="password" id="typePasswordX" class="form-control form-control-lg" @bind="@SignInRequest.Password"/>
									<label class="form-label" for="typePasswordX">Password</label>
								</div>

								<button class="btn btn-outline-light btn-lg px-5" type="submit">Login</button>

							</div>

							<div>
								<p class="mb-0">Don't have an account? <a href="#" class="text-white-50 fw-bold">Sign Up</a>
								</p>
							</div>

						</div>
					</div>
				</div>
			</div>
		</div>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private UserSignInRequest SignInRequest { get; set; } = new UserSignInRequest();

    private async Task ValidSubmit()
    {
        var result = await IdentityApi.SignInAsync(SignInRequest);

        if (!result.Success || string.IsNullOrWhiteSpace(result.Token))
        {
            return;
        }

        //Save token in store
        await TokenStore.SaveTokenAsync(result.Token);

        //Login in to browser
        AuthenticationStateProvider.NotifyAuthenticationStateChanged();

        if (string.IsNullOrWhiteSpace(ReturnUrl))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
    }
}
