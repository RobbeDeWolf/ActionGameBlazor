@page "/register"

@using ActionCommandGame.Api.Authentication.Model
@using ActionCommandGame.Sdk.Abstractions
@using ActionCommandGame.BlazorApp.Providers
@inject IIdentityApi IdentityApi
@inject ITokenStore TokenStore
@inject NavigationManager NavigationManager
@inject TokenAuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="RegisterRequest" OnValidSubmit="ValidSubmit">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>
	<div class="container py-5 h-100">
		<div class="row d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5">
				<div class="card bg-dark text-white" style="border-radius: 1rem;">
					<div class="card-body p-5 text-center">

						<div class="mb-md-5 mt-md-4 pb-5">

							<h2 class="fw-bold mb-2 text-uppercase">Register</h2>
							<p class="text-white-50 mb-5">Please enter your login and password!</p>

							<div class="form-outline form-white mb-4">
								<input type="email" id="typeEmailX" class="form-control form-control-lg" @bind="@RegisterRequest.Email" />
								<label class="form-label" for="typeEmailX" style="position: relative; top: 10px;">Email</label>
							</div>

							<div class="form-outline form-white mb-4">
								<input type="password" id="typePasswordX" class="form-control form-control-lg" @bind="@RegisterRequest.Password" />
								<label class="form-label" for="typePasswordX" style="position: relative; top: 10px;">Password</label>
							</div>

							<button class="btn btn-outline-light btn-lg px-5" type="submit">Register</button>

						</div>

						<div>
							<p class="mb-0" style="position: relative; bottom: 10px;">Have an account?</p>
							<button class="btn btn-outline-light btn-lg px-5" @onclick="Loginscreen">Login</button>
						</div>

					</div>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	private UserRegistrationRequest RegisterRequest { get; set; } = new UserRegistrationRequest();

	private async Task ValidSubmit()
	{
		var result = await IdentityApi.RegisterAsync(RegisterRequest);

		if (!result.Success || string.IsNullOrWhiteSpace(result.Token))
		{
			return;
		}

	//Save token in store
		await TokenStore.SaveTokenAsync(result.Token);

	//Login in to browser
		AuthenticationStateProvider.NotifyAuthenticationStateChanged();

		NavigationManager.NavigateTo("/characters");
	}

	private void Loginscreen()
	{
		NavigationManager.NavigateTo("/signin");
	}
}