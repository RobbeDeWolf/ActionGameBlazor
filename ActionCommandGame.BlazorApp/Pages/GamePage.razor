@page "/character/{characterid}"
@attribute [Authorize]
@inject IGameApi gameApi
@inject IPlayerApi playerApi
@inject NavigationManager navManager

<PageTitle>Index</PageTitle>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<style>
	.page {
		background-image: url(../Images/Background_bar.jpg);
	}
</style>

<div class="w3-container" style="position: absolute; left: 130px; top: 90px; width: 290px" >
	Health:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-green" style="width:@Food%">@Food</div>
	</div>
	Soberness:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-red" style="width: @Attack%">@Attack</div>
	</div>
	Energy:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-yellow" style="width:@Defense%">@Defense</div>
	</div>
	Player Level: @playerlevel
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-yellow" style="width:@playerexperiencepercentage%">@playerExperience / @playerExperienceForNextLevel</div>
	</div>
</div>
Money:
<div>
	<p>@Money</p>
</div>

<div>
	<button class="btn btn-primary" @onclick="Drink">Drink!</button>
</div>
<div>
	<button class="btn btn-primary" @onclick="ChangeCharacter">Change Character</button>
</div>

<img src="@playerImageSource" alt="Card image cap" style=" height: 570px; width: auto; position: absolute; right: 130px; bottom:50px;">

@code{
	[Parameter]
	public string? characterid { get; set; }
	public int playerId { get; set; }
	public string playerImageSource { get; set; }

	// Player stats
	public int playerlevel { get; set; } = 0;
	public int playerExperience { get; set; } = 0;
	public int playerExperienceForNextLevel { get; set; } = 0;
	public int playerexperiencepercentage { get; set; }
	public int Money { get; set; } = 0;

	// Food stats
	private int Food { get; set; } = 0; // soberness
	private int FoodPercentage { get; set; } = 0;
	private int MaxFood { get; set; } = 0;
	private bool isFood { get; set; }

	// Attack stats
	private int Attack { get; set; } = 0;

	// Defence stats
	private int Defense { get; set; } = 0;

	protected async override Task<Task> OnInitializedAsync()
	{
		if (characterid != null)
		{
			playerId = int.Parse(characterid);
			playerImageSource = $"../Images/player{playerId}.png";
		}
		await ShowStats();

		return base.OnInitializedAsync();
	}

	private async Task Drink()
	{
		if (characterid != null)
		{
			var result = await gameApi.PerformActionAsync(playerId);

			await ShowStats();
		}
	}

	private void ChangeCharacter()
	{
		navManager.NavigateTo("/characters");
	}

	private async Task ShowStats()
	{
		var playerResult = await playerApi.GetAsync(playerId);
		var player = playerResult.Data;

		//check food
		if (player.CurrentFuelId != null)
		{
			isFood = true;
			Food = player.RemainingFuel;
			MaxFood = player.TotalFuel;
		}
		else
		{
			isFood = false;
			Food = 0;
			MaxFood = 0;
	// test
		}
		// check Attack

		// check Defense

		// check player experience
		playerlevel = player.GetLevel();
		playerExperience = player.Experience;
		playerExperienceForNextLevel = player.GetExperienceForNextLevel();
		playerexperiencepercentage = (playerExperience * 100) / playerExperienceForNextLevel;

		// check money
		Money = player.Money;
	}

}