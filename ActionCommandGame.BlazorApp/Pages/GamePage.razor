@page "/character/{characterid}"
@using ActionCommandGame.Services.Model.Core
@attribute [Authorize]
@inject IGameApi gameApi
@inject IPlayerApi playerApi
@inject NavigationManager navManager

<PageTitle>Index</PageTitle>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<style>
	.page {
		background-image: url(../Images/Background_bar.jpg);
	}
</style>

<div class="w3-container" style="position: absolute; left: 130px; top: 90px; width: 290px" >
	Health:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-green" style="width:@FoodPercentage%">@Food / @MaxFood</div>
	</div>
	Soberness:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-red" style="width: @AttackPercentage%">@Attack / @MaxAttack</div>
	</div>
	Energy:
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-yellow" style="width:@DefensePercentage%">@Defense / @MaxDefense</div>
	</div>
	Player Level: @playerlevel
	<div class="w3-light-grey w3-round w3-tiny progressbar">
		<div class="w3-container w3-round w3-yellow" style="width:@playerexperiencepercentage%">@playerExperience / @playerExperienceForNextLevel</div>
	</div>
</div>
Money:
<div>
	<p style="color: white">@Money</p>
</div>

@if (gameEventName is not null)
{
	<div class="box sb3">
		<p>EventName: @gameEventName</p>
		@if (!string.IsNullOrWhiteSpace(gameEventDescription))
		{
			<p>EventDescription: @gameEventDescription</p>
		}
	</div>
	foreach (var message in messages)
	{
		if (message.Code =="Cooldown")
		{
			<div class="box sb3">
				<p>@message.Message</p>
			</div>
		}
	}
}

<div>
	<button class="btn btn-primary" @onclick="PerformAction">Drink!</button>
</div>
<div>
	<button class="btn btn-primary" @onclick="ChangeCharacter">Change Character</button>
</div>

<img src="@playerImageSource" alt="Card image cap" style=" height: 570px; width: auto; position: absolute; right: 130px; bottom:50px;">

@code{
	[Parameter]
	public string? characterid { get; set; }

	public int playerId { get; set; }
	public string playerImageSource { get; set; }

	// Player stats
	public int playerlevel { get; set; }
	public int playerExperience { get; set; }
	public int playerExperienceForNextLevel { get; set; }
	public int playerexperiencepercentage { get; set; }
	public int Money { get; set; }

	// Food stats
	private int Food { get; set; }// soberness
	private int FoodPercentage { get; set; }
	private int MaxFood { get; set; }
	private bool IsFood { get; set; }

	// Attack stats
	private int Attack { get; set; }
	private int AttackPercentage { get; set; }
	private int MaxAttack { get; set; }
	private bool IsAttack { get; set; }

	// Defense stats
	private int Defense { get; set; }
	private int DefensePercentage { get; set; }
	private int MaxDefense { get; set; }
	private bool IsDefense { get; set; }

	// GameEvent
	private IList<ServiceMessage> messages { get; set; }
	private string gameEventName { get; set; }
	private string gameEventDescription { get; set; }
	private int MoneyAdded { get; set; }

	protected async override Task<Task> OnInitializedAsync()
	{
		if (characterid != null)
		{
			playerId = int.Parse(characterid);
			playerImageSource = $"../Images/player{playerId}.png";
		}
		await ShowStats();

		return base.OnInitializedAsync();
	}

	private async Task PerformAction()
	{
		if (characterid == null)
		{
			return;
		}
		var result = await gameApi.PerformActionAsync(playerId);
		var player = result.Data.Player;
		var positiveGameEvent = result.Data.PositiveGameEvent;
		var negativeGameEvent = result.Data.NegativeGameEvent;

		if (positiveGameEvent != null)
		{
			gameEventName = positiveGameEvent.Name;
			if (!string.IsNullOrWhiteSpace(positiveGameEvent.Description))
			{
				gameEventDescription = positiveGameEvent.Description;
			}
			if (positiveGameEvent.Money > 0)
			{
				MoneyAdded = positiveGameEvent.Money;
			}
			else
			{
				MoneyAdded = 0;
			}
		}
		if (negativeGameEvent != null)
		{
			gameEventName = negativeGameEvent.Name;
			if (!string.IsNullOrWhiteSpace(negativeGameEvent.Description))
			{
				gameEventDescription = negativeGameEvent.Description;
			}
			//result.Data.NegativeGameEventMessages
		}
		messages = result.Messages;

		await ShowStats();
	}

	private async Task ShowStats()
	{
		var playerResult = await playerApi.GetAsync(playerId);
		var player = playerResult.Data;

		//check food
		if (player.CurrentFuelId != null)
		{
			IsFood = true;
			Food = player.RemainingFuel;
			MaxFood = player.TotalFuel;
			FoodPercentage = (Food * 100) / MaxFood;
		}
		else
		{
			IsFood = false;
			Food = 0;
			MaxFood = 0;
		}
		// check Attack
		if (player.CurrentAttackId != null)
		{
			IsAttack = true;
			Attack = player.RemainingAttack;
			MaxAttack = player.TotalAttack;
			AttackPercentage = (Attack * 100) / MaxAttack;
		}
		else
		{
			IsAttack = false;
			Attack = 0;
			MaxAttack = 0;
		}
	// check Defense
		if (player.CurrentDefenseId != null)
		{
			IsDefense = true;
			Defense = player.RemainingDefense;
			MaxDefense = player.TotalDefense;
			DefensePercentage = (Defense * 100) / MaxDefense;
		}
		else
		{
			IsDefense = false;
			Defense = 0;
			MaxDefense = 0;
		}

		// check player experience
		playerlevel = player.GetLevel();
		playerExperience = player.Experience;
		playerExperienceForNextLevel = player.GetExperienceForNextLevel();
		playerexperiencepercentage = (playerExperience * 100) / playerExperienceForNextLevel;

		// check money
		Money = player.Money;
	}
	private void ChangeCharacter()
	{
		navManager.NavigateTo("/characters");
	}

}