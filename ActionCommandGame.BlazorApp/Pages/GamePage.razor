@page "/character/{characterid}"
@using ActionCommandGame.Services.Model.Core
@attribute [Authorize]
@inject IGameApi gameApi
@inject IPlayerApi playerApi
@inject NavigationManager navManager

<PageTitle>Index</PageTitle>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<style>
	.page {
		background-image: url(../Images/Background_bar.jpg);
		/*filter: blur(2px);*/
	}
</style>

<div style="position: absolute; left: 45px; top: 267px; width: 223px">
	<span class="progressbarheader">Energy:</span>
	<div title="@Food / @MaxFood">
		<img style="height: 30px; width: auto" src="../Images/Loading_Bar_Large.png" alt="Drink Button">
		<div class="w3-container w3-round w3-green psbar" style="width: @FoodPercentage%;"></div>
	</div>
	<span class="progressbarheader">Soberness:</span>
	<div title="@Attack / @MaxAttack">
		<img style="height: 30px; width: auto" src="../Images/Loading_Bar_Large.png" alt="Drink Button">
		<div class="w3-container w3-round w3-red psbar" style="width: @AttackPercentage%;"></div>
	</div>
	<span class="progressbarheader">Reputation:</span>
	<div title="@Defense / @MaxDefense">
		<img style="height: 30px; width: auto" src="../Images/Loading_Bar_Large.png" alt="Drink Button">
		<div class="w3-container w3-round w3-yellow psbar" style="width: @DefensePercentage%;"></div>
	</div>
	<span class="progressbarheader">Player Level: @playerlevel</span>
	<div title="@playerExperience / @playerExperienceForNextLevel">
		<img style="height: 30px; width: auto" src="../Images/Loading_Bar_Large.png" alt="Drink Button">
		<div class="w3-container w3-round w3-yellow psbar" style="width: @playerexperiencepercentage%;"></div>
	</div>
</div>

<div style="position: absolute; left: 51px; bottom: 364px;">
	<img style="height: 38px; width: auto" src="../Images/Money.png" alt="Drink Button">
	<span style="position: absolute; bottom: 10px; right: 12px;">@Money</span>
</div>

@if (messages is not null)
{
	<div class="box sb3">
		<p>@gameEventName</p>
		@if (!string.IsNullOrWhiteSpace(gameEventDescription))
		{
			<p>@gameEventDescription</p>
		}
	</div>
	foreach (var message in messages)
	{
		if (message.Code =="Cooldown")
		{
			<div class="box sb3">
				<p>@message.Message</p>
			</div>
		}
	}
}

<div style="position: absolute; left: 50%;transform: translateX(-50%); bottom: 269px; width: auto;">
	<button @onclick="PerformAction" style="border: none;cursor: pointer;appearance: none;background-color: inherit;">
		<img style="height:62px; width: auto" src="../Images/Button_Drink.png" alt="Drink Button">
	</button>
</div>

<div>
	<button class="btn btn-primary" @onclick="ChangeCharacter">Change Character</button>
</div>
<div style="position: absolute; right: 47px; top: 168px; width: 290px; transform: rotate(23deg);">
	<button class="shopbtn" @onclick="OpenShop">
		<img style="height:90px; width: auto" src="../Images/Button_Shop_Large.png" alt="Drink Button">
	</button>
</div>
@if (LevelUpPopup)
{
	<img class="LevelupPopup" src="../Images/LevelUp.png" alt="levelup img">
}

<img src="@playerImageSource" alt="Card image cap" style=" height: 570px; width: auto; position: absolute; right: 130px; bottom:50px;">

@code{
	[Parameter]
	public string? characterid { get; set; }

	public int playerId { get; set; }
	private string playerImageSource { get; set; }

	// Player stats
	public int playerlevel { get; set; }
	public int playerExperience { get; set; }
	public int playerExperienceForNextLevel { get; set; }
	public int playerexperiencepercentage { get; set; }
	public int Money { get; set; }

	// Food stats
	private int Food { get; set; }// soberness
	private int FoodPercentage { get; set; }
	private int MaxFood { get; set; }
	private bool IsFood { get; set; }

	// Attack stats
	private int Attack { get; set; }
	private int AttackPercentage { get; set; }
	private int MaxAttack { get; set; }
	private bool IsAttack { get; set; }

	// Defense stats
	private int Defense { get; set; }
	private int DefensePercentage { get; set; }
	private int MaxDefense { get; set; }
	private bool IsDefense { get; set; }

	// GameEvent
	private IList<ServiceMessage> messages { get; set; }
	private string gameEventName { get; set; }
	private string gameEventDescription { get; set; }
	private int MoneyAdded { get; set; }
	private bool LevelUpPopup = false;

	protected async override Task<Task> OnInitializedAsync()
	{
		if (characterid != null)
		{
			playerId = int.Parse(characterid);
		}
		await ShowStats();

		return base.OnInitializedAsync();
	}

	private async Task PerformAction()
	{
		if (characterid == null)
		{
			return;
		}
		var result = await gameApi.PerformActionAsync(playerId);
		var player = result.Data.Player;
		var positiveGameEvent = result.Data.PositiveGameEvent;
		var negativeGameEvent = result.Data.NegativeGameEvent;

		if (positiveGameEvent != null)
		{
			gameEventName = positiveGameEvent.Name;
			if (!string.IsNullOrWhiteSpace(positiveGameEvent.Description))
			{
				gameEventDescription = positiveGameEvent.Description;
			}
			else
			{
				gameEventDescription = string.Empty;
			}
			if (positiveGameEvent.Money > 0)
			{
				MoneyAdded = positiveGameEvent.Money;
			}
			else
			{
				MoneyAdded = 0;
			}
		}
		if (negativeGameEvent != null)
		{
			gameEventName = negativeGameEvent.Name;
			if (!string.IsNullOrWhiteSpace(negativeGameEvent.Description))
			{
				gameEventDescription = negativeGameEvent.Description;
			}
			else
			{
				gameEventDescription = string.Empty;
			}
			//result.Data.NegativeGameEventMessages
		}
		messages = result.Messages;
		await checkLevelUp(messages);

		await ShowStats();
	}

	private async Task ShowStats()
	{
		var playerResult = await playerApi.GetAsync(playerId);
		var player = playerResult.Data;

		//check food
		if (player.CurrentFuelId != null)
		{
			IsFood = true;
			Food = player.RemainingFuel;
			MaxFood = player.TotalFuel;
			FoodPercentage = (Food * 100) / MaxFood;
		}
		else
		{
			IsFood = false;
			Food = 0;
			MaxFood = 0;
		}
		// check Attack
		if (player.CurrentAttackId != null)
		{
			IsAttack = true;
			Attack = player.RemainingAttack;
			MaxAttack = player.TotalAttack;
			AttackPercentage = (Attack * 100) / MaxAttack;
		}
		else
		{
			IsAttack = false;
			Attack = 0;
			MaxAttack = 0;
		}
	// check Defense
		if (player.CurrentDefenseId != null)
		{
			IsDefense = true;
			Defense = player.RemainingDefense;
			MaxDefense = player.TotalDefense;
			DefensePercentage = (Defense * 100) / MaxDefense;
		}
		else
		{
			IsDefense = false;
			Defense = 0;
			MaxDefense = 0;
		}

		// check player experience
		playerlevel = player.GetLevel();
		playerExperience = player.Experience;
		playerExperienceForNextLevel = player.GetExperienceForNextLevel();
		playerexperiencepercentage = (playerExperience * 100) / playerExperienceForNextLevel;

		playerImageSource = $"../Images/player{player.Name}.png";

		// check money
		Money = player.Money;
	}
	private void ChangeCharacter()
	{
		navManager.NavigateTo("/characters");
	}

	private void OpenShop()
	{
		navManager.NavigateTo($"/Shop/{playerId}");
	}

	private async Task checkLevelUp(IList<ServiceMessage> messages )
	{
		foreach (var message in messages)
		{
			if (message.Code == "LevelUp")
			{
				LevelUpPopup = true;
				StateHasChanged();
				await Task.Delay(4000);
				LevelUpPopup = false;
				StateHasChanged();
			}
		}
	}
}