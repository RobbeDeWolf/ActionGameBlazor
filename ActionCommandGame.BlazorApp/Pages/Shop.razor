@page "/Shop/{characterid}"
@using ActionCommandGame.Services.Model.Core
@using ActionCommandGame.Services.Model.Results
@attribute [Authorize]
@inject NavigationManager navManager
@inject IItemApi itemApi
@inject IGameApi gameApi
@inject IPlayerApi playerApi
<style>
	.page {
		background-image: url(../Images/Shop.jpg);
	}
</style>

<div style="position: absolute; right: 47px; top: 168px; width: 290px; transform: rotate(23deg);">
	<button class="shopbtn" @onclick="GoBackToGame">
		<img style="height:90px; width: auto" src="../Images/Button_Shop_Back.png" alt="Drink Button">
	</button>
</div>

@if (!string.IsNullOrWhiteSpace(boughtItem))
{
	<div class="alert alert-success">You bought @boughtItem for the price of @priceBoughtItem</div>
}
@if (purchaseFailed)
{
	<div class="alert alert-danger">Purchase failed... check your balance</div>
}
<div class="tableFixHead">
	<table>
		<thead>
		<tr>
			<th>Item name</th>
			<th>Description</th>
			<th>Bonus</th>
			<th> </th>
			<th>Price</th>
			<th> </th>
		</tr>
		</thead>
		<tbody>
		@foreach (var item in items)
		{
			<tr>
				<td>@item.Name</td>
				@if (!string.IsNullOrWhiteSpace(item.Description))
				{
					<td>@item.Description</td>
				}
				else
				{
					<td></td>
				}
				@if (item.Fuel > 0)
				{
					
					@if (item.ActionCooldownSeconds > 0)
					{
						<td><span class="ShopBonus">Energy:</span><br/><span class="ShopBonus">Cooldown:</span></td>
						<td>@item.Fuel <br />@item.ActionCooldownSeconds</td>
					}
					else
					{
						<td><span class="ShopBonus">Energy:</span></td>
						<td>@item.Fuel</td>
					}
				}else if (item.Attack > 0)
				{
					<td><span class="ShopBonus">Soberness:</span></td>
					<td>@item.Attack</td>
				}else if (item.Defense > 0)
				{
					<td><span class="ShopBonus">Reputation:</span></td>
					<td>@item.Defense</td>
				}
				else
				{
					<td> </td>
					<td> </td>
				}
				<td>@item.Price</td>
				<td>
					<button class="btn btn-primary" @onclick="() => Buy(item.Id)">Buy</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
</div>

<div style="position: fixed; bottom: 8%; left: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%);">
	<img style="height: 55px; width: auto" src="../Images/Money.png" alt="">
	<span style=" position: absolute; bottom: 16px; right: 17px; color: white">@playerMoney</span>
</div>
<img src="@playerImageSource" alt="Card image cap" style=" height: 570px; width: auto; position: absolute; right: 130px; bottom:50px;">

@code
{
	[Parameter]
	public string? characterid { get; set; }

	private string boughtItem { get; set; }
	private int priceBoughtItem { get; set; }
	private bool purchaseFailed = false;
	private int playerMoney { get; set; }
	private string playerImageSource { get; set; }

	public IList<ItemResult> items { get; set; } = new List<ItemResult>();



	protected override async Task<Task> OnInitializedAsync()
	{
		var shopItems = await itemApi.FindAsync();
		foreach (var item in shopItems.Data)
		{
			items.Add(item);
		}
		if (characterid != null)
		{
			var playerResult = await playerApi.GetAsync(int.Parse(characterid));
			var player = playerResult.Data;
			if (player.Name != "Frank Booze" && player.Name != "Marie Shots" && player.Name != "Jack Wasted" && player.Name != "Julie Baller")
			{
				playerImageSource = $"../Images/playerFrank Booze.png";
			}
			else
			{
				playerImageSource = $"../Images/player{player.Name}.png";
			}
			playerMoney = player.Money;
		}
		return base.OnInitializedAsync();
	}

	private void GoBackToGame()
	{
		navManager.NavigateTo($"/character/{characterid}");
	}

	private async Task Buy(int itemId)
	{
		if (characterid == null)
		{
			return;
		}
		var result = await gameApi.BuyAsync(int.Parse(characterid), itemId);
		if (result.IsSuccess)
		{
			boughtItem = result.Data.Item.Name;
			priceBoughtItem = result.Data.Item.Price;
			playerMoney = result.Data.Player.Money;
			StateHasChanged();
			await Task.Delay(3000);

			boughtItem = string.Empty;
			priceBoughtItem = 0;
			StateHasChanged();

		}
		else
		{
			purchaseFailed = true;
			boughtItem = string.Empty;
			priceBoughtItem = 0;
			StateHasChanged();
			await Task.Delay(3000);
			purchaseFailed = false;
			StateHasChanged();
			var errorMessages = result.Messages.Where(m => m.MessagePriority == MessagePriority.Error).ToList();

		}
	}
}
