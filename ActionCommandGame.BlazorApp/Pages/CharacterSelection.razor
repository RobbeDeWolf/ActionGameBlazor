@page "/characters"
@using Microsoft.AspNetCore.Authorization
@using ActionCommandGame.Sdk.Abstractions
@using ActionCommandGame.Services.Model.Core
@using ActionCommandGame.Services.Model.Filters
@using ActionCommandGame.Services.Model.Results
@using ActionCommandGame.BlazorApp.Stores
@inject IPlayerApi playerApi
@inject NavigationManager navManager
@inject MemoryStore memoryStore
@attribute [Authorize]

<PageTitle>Index</PageTitle>
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<style>
	.page {
		background-image: url(../Images/Background_bar.jpg);
	}
</style>
@if (players is not null)
{
	@if (players.Data.Count < 4)
	{
		<div style="position: absolute; top: 31px; left: 50px;">
			<button class="shopbtn" @onclick="CreatePlayerScreen">
				<img style="height:58px; width: auto" src="../Images/Button_CreateCharacter.png" alt="Drink Button">
			</button>
		</div>
	}
	<div class="row characterselectioncards">
		<div class="col-2"></div>
		@foreach (var player in players.Data)
		{
			string imagesource = string.Empty;
			if (player.Name != "Frank Booze" && player.Name != "Marie Shots" && player.Name != "Jack Wasted" && player.Name != "Julie Baller")
			{
				imagesource = $"../Images/playerFrank Booze.png";
			}
			else
			{
				imagesource = $"../Images/player{player.Name}.png";
			}

			<div class="col-md-2">
				<div class="card">
					<button class="btn btn-danger" style="position: relative; bottom: 2px; left: 241px; width: 50px;" @onclick="() => DeletePlayer(player.Id)">X</button>
					<img class="card-img-top smallimg mx-auto" src="@imagesource" alt="Card image cap" style="height: 446px; width: auto; vertical-align: middle;">
					<ul class="list-group list-group-flush">
						<li class="list-group-item">Level: @player.GetLevel()</li>
						<li class="list-group-item">Experience: @player.Experience</li>
						<li class="list-group-item">Money: @player.Money</li>
					</ul>
					<div class="card-body">
						<h5 class="card-title" style="font-weight: bold">@player.Name</h5>
						<button class="btn btn-primary"@onclick="() => SelectPlayer(player.Id)">Play!</button>
						
					</div>
				</div>
			</div>
		}
		<div class="col-2"></div>
	</div>
}


@code
{
	public ServiceResult<IList<PlayerResult>> players { get; set; }
	protected async override Task<Task> OnInitializedAsync()
	{
		var filter = new PlayerFilter { FilterUserPlayers = true };
		players = await playerApi.Find(filter);

		if (!players.Data.Any())
		{
			await LoadDefaults();
			players = await playerApi.Find(filter);
		}
		return base.OnInitializedAsync();
	}

	public void SelectPlayer(int id)
	{
		if (id == 0)
		{
			return;
		}
		memoryStore.CurrentPlayerId = id;
		navManager.NavigateTo($"/character/{id}");

	}

	public async Task DeletePlayer(int id)
	{
		if (id == 0)
		{
			return;
		}
		await playerApi.Delete(id);
		var filter = new PlayerFilter { FilterUserPlayers = true };
		players = await playerApi.Find(filter);
	}

	public void CreatePlayerScreen()
	{
		navManager.NavigateTo("/createcharacter");
	}

	private async Task LoadDefaults()
	{
		var Frank = new PlayerResult
		{
			Name = "Frank Booze",
			Money = 100
		};
		var Marie = new PlayerResult
		{
			Name = "Marie Shots",
			Money = 1000,
			Experience = 200
		};
		var Jack = new PlayerResult
		{
			Name = "Jack Wasted",
			Money = 500,
			Experience = 5
		};
		var Julie = new PlayerResult
		{
			Name = "Julie Baller",
			Money = 12345,
			Experience = 2000
		};

		await playerApi.Create(Frank);
		await playerApi.Create(Marie);
		await playerApi.Create(Jack);
		await playerApi.Create(Julie);
	}
}
