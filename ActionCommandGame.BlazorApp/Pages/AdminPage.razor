@page "/admin/{characterid}"
@using ActionCommandGame.Services.Model.Results
@attribute [Authorize]
@inject NavigationManager NavManager
@inject IItemApi itemApi

<button @onclick="backtogame" class="btn btn-primary">Go back</button>

<div class="tableFixHead">
	<table>
		<thead>
		<tr>
			<th>Item name</th>
			<th>Description</th>
			<th>Bonus</th>
			<th> </th>
			<th>Price</th>
			<th> </th>
		</tr>
		</thead>
		<tbody>
		@foreach (var item in items)
		{
			<tr>
				<td>@item.Name</td>
				@if (!string.IsNullOrWhiteSpace(item.Description))
				{
					<td>@item.Description</td>
				}
				else
				{
					<td></td>
				}
				@if (item.Fuel > 0)
				{

					@if (item.ActionCooldownSeconds > 0)
					{
						<td><span class="ShopBonus">Energy:</span><br /><span class="ShopBonus">Cooldown:</span></td>
						<td>@item.Fuel <br />@item.ActionCooldownSeconds</td>
					}
					else
					{
						<td><span class="ShopBonus">Energy:</span></td>
						<td>@item.Fuel</td>
					}
				}
				else if (item.Attack > 0)
				{
					<td><span class="ShopBonus">Soberness:</span></td>
					<td>@item.Attack</td>
				}
				else if (item.Defense > 0)
				{
					<td><span class="ShopBonus">Reputation:</span></td>
					<td>@item.Defense</td>
				}
				else
				{
					<td> </td>
					<td> </td>
				}
				<td>@item.Price</td>
				<td>
					<button class="btn btn-danger" @onclick="() => Delete(item.Id)">Delete</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
</div>
<button class="btn btn-primary" @onclick="CreateItemView">Create a new item</button>
<button class="btn btn-primary"@onclick="CreateNegativeEvent">Create a negative game event</button>
<button class="btn btn-primary" @onclick="CreatePositiveEvent">Create a positive game event</button>
@code{

	[Parameter]
	public string? characterid { get; set; }

	public IList<ItemResult> items { get; set; } = new List<ItemResult>();

	private void backtogame()
	{
		NavManager.NavigateTo($"/character/{characterid}");
	}

	protected override async Task<Task> OnInitializedAsync()
	{
		var shopItems = await itemApi.FindAsync();
		foreach (var item in shopItems.Data)
		{
			items.Add(item);
		}
		return base.OnInitializedAsync();
	}

	private void CreateItemView()
	{
		NavManager.NavigateTo($"/createItem/{characterid}");
	}

	private void CreateNegativeEvent()
	{
		NavManager.NavigateTo($"/createNegativeEvent/{characterid}");
	}
	private void CreatePositiveEvent()
	{
		NavManager.NavigateTo($"/createPositiveEvent/{characterid}");
	}

	private async Task Delete(int itemid)
	{
		if (itemid == 0)
		{
			return;
		}
		await itemApi.Delete(itemid);
		var shopItems = await itemApi.FindAsync();
		items = new List<ItemResult>();
		foreach (var item in shopItems.Data)
		{
			items.Add(item);
		}
	}

}